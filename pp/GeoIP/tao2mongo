#! /usr/bin/env ruby

# documentation
#   http://trollop.rubyforge.org/
# ARGF: Automatically Read from Files or Standard Input


require 'bundler/setup'

require 'trollop'
require 'oj'
require 'mongo'

require 'geoip'

# handle options

options = Trollop::options do
  version "tao2mongo 0.0.1 (c) 2013 Wlodek Bzyl"
  banner <<-EOS
Import JSON log data from Tao into MongoDB.

Example:
  ./tao2mongo --host 127.0.0.1 --db test --collection tao data/tao.json.log
  ./tao2mongo data/tao.json.log

Options:
EOS

  opt :db,         "database to use", type: :string, default: "test"
  opt :collection, "collection to use", type: :string, default: "tao"
  opt :host,       "mongo host to connect to", type: :string, default: "127.0.0.1"
  opt :port,       "server port", type: :string, default: "27017"

  opt :drop,       "drop collection first", default: true
  opt :batch,      "batch size for bulk inserts", type: :integer, default: 400
end

# transform hashified JSON

geoip = GeoIP.new('GeoLiteCity.dat')

# http://www.ruby-doc.org/core-2.0/Time.html#method-i-strftime

def transform(geoip, hash)
  h = hash.delete "fields"
  h['timestamp'] = hash.delete "timestamp"

  city = geoip.city(h['remote_addr'])

  h['ll'] = [city.latitude, city.longitude]
  h['country_code2'] = city.country_code2
  h['continent_code'] = city.continent_code

  # http://www.ruby-doc.org/core-1.9.3/String.html#method-i-encode
  h['city'] = city.city_name.encode('utf-8', 'iso-8859-1', invalid: :replace, undef: :replace)
  h['country'] = city.country_name.encode('utf-8', 'iso-8859-1', invalid: :replace, undef: :replace)

  time = Time.parse(h['timestamp']).utc
  h['time'] = time.to_a
  hash['time_at'] = time.to_i

  puts "#{ h['remote_addr'] } => #{ h['city'] }"
  h
end

def append?(hash)
  fields = hash['fields']
  # puts "#{ fields['status'] } && #{fields['request_method']}"
  return fields['status'] == '200' && fields['request_method'] == 'GET'
end

# connect to MongoDB

include Mongo

# write concern: https://github.com/mongodb/mongo-ruby-driver/wiki/Write-Concern
  db = MongoClient.new(options[:host], options[:port], w: 1, wtimeout: 200, j: true).db(options[:db])
coll = db.collection(options[:collection])

coll.drop if options[:drop]

batch = []
ARGF.each_line do |line|
  h = Oj.load(line)
  batch << transform(geoip, h) if append?(h)

  if batch.size > 0 && ( ARGF.eof? || batch.size % options[:batch] == 0 )
    coll.insert(batch)
    batch = []
  end
end
