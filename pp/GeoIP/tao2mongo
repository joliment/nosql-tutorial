#! /usr/bin/env ruby

# documentation
#   http://trollop.rubyforge.org/
# ARGF: Automatically Read from Files or Standard Input


require 'bundler/setup'

require 'trollop'
require 'oj'
require 'mongo'

require 'geoip'

# handle options

options = Trollop::options do
  version "tao2mongo 0.0.1 (c) 2013 Wlodek Bzyl"
  banner <<-EOS
Import JSON log data from Tao into MongoDB.

Example:
  ./tao2mongo --host 127.0.0.1 --db test --collection tao data/tao.json.log
  ./tao2mongo data/tao.json.log

Options:
EOS

  opt :db,         "database to use", type: :string, default: "test"
  opt :collection, "collection to use", type: :string, default: "tao"
  opt :host,       "mongo host to connect to", type: :string, default: "127.0.0.1"
  opt :port,       "server port", type: :string, default: "27017"

  opt :drop,       "drop collection first", default: true
  opt :batch,      "batch size for bulk inserts", type: :integer, default: 400
end

# transform hashified JSON

geoip = GeoIP.new('GeoLiteCity.dat')

# http://www.ruby-doc.org/core-2.0/Time.html#method-i-strftime

def transform(geoip, hash)
  # hash.delete("Query")
  # hash.delete("Method")

  # city = geoip.city(hash['RemoteIP'])

  # # http://www.ruby-doc.org/core-1.9.3/String.html#method-i-encode

  # city_name = city.city_name.encode('utf-8', 'iso-8859-1', invalid: :replace, undef: :replace)
  # hash['City'] = city_name
  # hash['Country'] = city.country_name.encode('utf-8', 'iso-8859-1', invalid: :replace, undef: :replace)
  # hash['CountryCode2'] = city.country_code2
  # hash['ContinentCode'] = city.continent_code

  # hash['LL'] = [city.latitude, city.longitude]

  # time_at = Time.at(hash['Time'])
  # hash['TimeAt'] = time_at.to_s
  # hash['Date'] = [time_at.year, time_at.month, time_at.day, time_at.hour, time_at.min, time_at.sec]

  # puts city_name
  p hash

  hash
end

def append?(hash)
  hash['RemoteIP'] != '127.0.0.1'
  false
end

# connect to MongoDB

include Mongo

# write concern: https://github.com/mongodb/mongo-ruby-driver/wiki/Write-Concern
  db = MongoClient.new(options[:host], options[:port], w: 1, wtimeout: 200, j: true).db(options[:db])
coll = db.collection(options[:collection])

coll.drop if options[:drop]

batch = []
ARGF.each_line do |line|
  h = Oj.load(line)
  batch << transform(geoip, h) if append?(h)

  if batch.size > 0 && ( ARGF.eof? || batch.size % options[:batch] == 0 )
    coll.insert(batch)
    batch = []
  end
end

__END__

begin
  # something which might raise an exception
rescue SomeExceptionClass => some_variable
  # code that deals with some exception
rescue SomeOtherException => some_other_variable
  # code that deals with some other exception
else
  # code that runs only if *no* exception was raised
ensure
  # ensure that this code always runs, no matter what
end1
